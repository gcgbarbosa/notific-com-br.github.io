{"version":3,"sources":["abertura.mp4","serviceWorker.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","useStyles","makeStyles","theme","grid","minHeight","createMuiTheme","palette","primary","main","secondary","light","contrastText","contrastThreshold","tonalOffset","GridSite","classes","Grid","className","spacing","direction","justify","alignItems","container","xs","sm","item","Box","p","autoPlay","playsInline","muted","width","src","VideoAbertura","type","Typography","align","variant","color","Link","href","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,sC,wJCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6ECTAC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,UAAW,YAMTF,EAAQG,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,WAKRC,UAAW,CACTC,MAAO,UACPF,KAAM,UAENG,aAAc,WAIhBC,kBAAmB,EAInBC,YAAa,MAGF,SAASC,IACtB,IAAMC,EAAUf,IAChB,OACI,kBAACgB,EAAA,EAAD,CACEC,UAAWF,EAAQZ,KACnBe,QAAS,EACTC,UAAU,SACVC,QAAQ,SACRC,WAAW,SACXC,WAAS,GAET,kBAACN,EAAA,EAAD,CAAMO,GAAI,GAAIC,GAAI,GAAIC,MAAI,GACtB,kBAACC,EAAA,EAAD,CAAKC,EAAG,GACR,2BAAOC,UAAQ,EAACC,aAAW,EAACC,OAAK,EAACC,MAAM,QACtC,4BAAQC,IAAKC,IAAeC,KAAK,iBAIvC,kBAAClB,EAAA,EAAD,CAAMO,GAAI,GAAIC,GAAI,GAAIC,MAAI,GACtB,kBAACC,EAAA,EAAD,CAAKC,EAAG,GACR,kBAACQ,EAAA,EAAD,CAAYC,MAAM,SAASC,QAAQ,KAAKC,MAAM,WAA9C,aAEE,kBAACC,EAAA,EAAD,CAAMC,KAAK,IAAIF,MAAM,aAArB,QAFF,iCAaZG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,CAAe1C,MAAOA,GACpB,kBAACY,EAAD,QAGJ+B,SAASC,eAAe,SDoDpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5daa0710.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/abertura.1ffed509.mp4\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport {Grid, Typography, Link, Box} from '@material-ui/core';\nimport { makeStyles, ThemeProvider, createMuiTheme} from \"@material-ui/core/styles\"\n\nimport VideoAbertura from './abertura.mp4';\n\nconst useStyles = makeStyles((theme) => ({\n  grid: {\n    minHeight: \"90vh\",\n  },\n}));\n\n\n// primary: '#19F59F',\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#2568B0',\n      // light: will be calculated from palette.primary.main,\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      light: '#0066ff',\n      main: '#FFCC29',\n      // dark: will be calculated from palette.secondary.main,\n      contrastText: '#ffcc00',\n    },\n    // Used by `getContrastText()` to maximize the contrast between\n    // the background and the text.\n    contrastThreshold: 3,\n    // Used by the functions below to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset: 0.2,\n  },\n});\nexport default function GridSite() {\n  const classes = useStyles();\n  return (\n      <Grid\n        className={classes.grid}\n        spacing={2}\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n        container\n      >\n        <Grid xs={12} sm={12} item>\n            <Box p={2}>\n            <video autoPlay playsInline muted width='100%'>\n              <source src={VideoAbertura} type='video/mp4' />\n            </video>\n            </Box>\n        </Grid>\n        <Grid xs={12} sm={12} item>\n            <Box p={2}>\n            <Typography align='center' variant='h4' color='primary'>\n              Clique&nbsp;\n              <Link href='#' color='secondary'>\n                aqui\n              </Link> \n              &nbsp;para saber quem somos.\n            </Typography>\n            </Box>\n        </Grid>\n      </Grid>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GridSite />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}